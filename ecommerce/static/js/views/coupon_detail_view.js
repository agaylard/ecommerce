define([
        'jquery',
        'backbone',
        'underscore',
        'underscore.string',
        'moment',
        'text!templates/coupon_detail.html'
    ],
    function ($,
              Backbone,
              _,
              _s,
              moment,
              CouponDetailTemplate) {
        'use strict';

        return Backbone.View.extend({
            className: 'coupon-detail-view',

            initialize: function () {
                this.listenTo(this.model, 'change', this.render);
            },

            render: function () {
                var html;

                html = _.template(CouponDetailTemplate)({coupon: this.model.attributes});
                this.$el.html(html);

                this.renderVoucherTable();
                this.refreshTableData();

                return this;
            },

            renderVoucherTable: function () {
                var filterPlaceholder = gettext('Search...'),
                    $emptyLabel = '<label class="sr">' + filterPlaceholder + '</label>';

                if (!$.fn.dataTable.isDataTable('#voucherTable')) {
                    this.$el.find('#voucherTable').DataTable({
                        autoWidth: false,
                        info: true,
                        paging: true,
                        oLanguage: {
                            oPaginate: {
                                sNext: gettext('Next'),
                                sPrevious: gettext('Previous')
                            },

                            // Translators: _START_, _END_, and _TOTAL_ are placeholders. Do NOT translate them.
                            sInfo: gettext('Displaying _START_ to _END_ of _TOTAL_ vouchers'),

                            // Translators: _MAX_ is a placeholder. Do NOT translate it.
                            sInfoFiltered: gettext('(filtered from _MAX_ total vouchers)'),

                            // Translators: _MENU_ is a placeholder. Do NOT translate it.
                            sLengthMenu: gettext('Display _MENU_ coupons'),
                            sSearch: ''
                        },
                        order: [[0, 'asc']],
                        columns: [
                            {
                                title: gettext('Name'),
                                data: 'name'
                            },
                            {
                                title: gettext('Code'),
                                data: 'code'
                            },
                            {
                                title: gettext('Usage'),
                                data: 'usage'
                            }
                        ]
                    });

                    // NOTE: #voucherTable_filter is generated by dataTables
                    this.$el.find('#voucherTable_filter label').prepend($emptyLabel);

                    this.$el.find('#voucherTable_filter input')
                        .attr('placeholder', filterPlaceholder)
                        .addClass('field-input input-text')
                        .removeClass('form-control input-sm');
                }
            },

            refreshTableData: function () {
                var data = this.model.attributes.vouchers,
                    $table = this.$el.find('#voucherTable').DataTable();

                $table.clear().rows.add(data).draw();
                return this;
            },
        });
    }
);
